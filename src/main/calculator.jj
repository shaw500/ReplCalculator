options {
    STATIC = false;
}
PARSER_BEGIN(Calculator)
import java.io.PrintStream;

class Calculator {

    double previousValue = 0.0;

    public static void main( String[] args) throws ParseException, TokenMgrError, NumberFormatException {
        Calculator parser = new Calculator(System.in);
        parser.Start(System.out);
    }
}
PARSER_END(Calculator)

SKIP : { " " }
TOKEN : { < EOL : "\n" | "\r" | "\r\n" > }
TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS : "-" > }
TOKEN : { < TIMES : "*" > }
TOKEN : { < DIVIDE : "/" > }
TOKEN : { < POWER : "^" > }
TOKEN : { <NUMBER : <DIGITS> | <DIGITS>"."<DIGITS> | "."<DIGITS> | <DIGITS>"." > }
TOKEN : { <#DIGITS : (["0" - "9"])+ > }
TOKEN : { < OPEN_PAR : "(" > }
TOKEN : { < CLOSE_PAR : ")" > }
TOKEN : { < PREVIOUS : "$" > }

void Start(PrintStream printStream) throws NumberFormatException:
{}
{
    (
        previousValue = Expression()
        <EOL>
        { printStream.println(previousValue); }
    )*
    <EOF>
}

double Expression() throws NumberFormatException :
{
    double i;
    double value;
}
{
    value = Term()
    (
        <PLUS>
        i = Term()
        { value += i; }
    |
        <MINUS>
        i = Term()
        { value -= i; }
    )*
    { return value; }
}

double Term() throws NumberFormatException :
{
    double i;
    double value;
}
{
    value = Primary()
    (
        <TIMES>
        i = Primary()
        { value *= i; }
    |
        <DIVIDE>
        i = Primary()
        { value /= i; }
    |
        <POWER>
        i = Primary()
        { return Math.pow(value, i); }
    )*
    { return value; }
}

double Primary() throws NumberFormatException :
{
    Token t;
    Double d;
}
{
    t = <NUMBER>
    { return Double.parseDouble(t.image); }
|
    <PREVIOUS>
    { return previousValue; }
|
    <OPEN_PAR> d = Expression() <CLOSE_PAR>
    { return d; }
|
    <MINUS> d = Primary()
    { return d; }
}